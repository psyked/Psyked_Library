package couk.psyked.pixelbender
{

	import flash.display.Shader;
	import flash.display.ShaderParameter;
	import flash.utils.ByteArray;

	/**
	 * Generated by PBJtoAS http://blog.minim.pl/PBJtoAS
	 *
	 * namespace : com.rphelan
	 * vendor : Ryan Phelan
	 * version : 1
	 * description : Projects an image onto a rippled surface of water
	 */

	public dynamic class WavereflectionShader extends Shader
	{

		static private var instance:WavereflectionShader;

		private var data2:Object;

		public function WavereflectionShader()
		{
			var ba:ByteArray = new ByteArray();
			var bytes:Arraysplit( '' );
			var i:uint = 0;

			while ( bytes.length )
			{
				ba.position = i;
				ba.writeByte( parseInt( bytes.shift() + bytes.shift(), 16 ) - 128 );
				i++;
			}
			ba.uncompress();

			super( ba );
			data2 = this[ 'data' ];
		}

		public function setDefaultParameters():void
		{
			var j:uint;

			for ( var i:String in data2 )
			{
				if ( data2[ i ] is ShaderParameter )
				{
					if ( data2[ i ].value[ 0 ] is Array )
					{
						for ( j = 0; j < data2[ i ].value.length; j++ )
						{
							ShaderParameter( data2[ i ]).value[ j ] = ShaderParameter( data2[ i ])[ 'defaultValue' ][ j ].concat();
						}
					}
					else
					{
						ShaderParameter( data2[ i ]).value = ShaderParameter( data2[ i ])[ 'defaultValue' ].concat();
					}
				}
			}
		}

		public function get amplitude():Number
		{
			return Number( data2.amplitude.value[ 0 ]);
		}

		/**
		 * @param float_ from 0 to 1
		 */
		public function set amplitude( float_:Number ):void
		{
			data2.amplitude.value[ 0 ] = float_;
		}

		public function get progress():Number
		{
			return Number( data2.progress.value[ 0 ]);
		}

		/**
		 * @param float_ from 0 to 1
		 */
		public function set progress( float_:Number ):void
		{
			data2.progress.value[ 0 ] = float_;
		}

		public function get frequency():Number
		{
			return Number( data2.frequency.value[ 0 ]);
		}

		/**
		 * @param float_ from 0 to 0.5400000214576721
		 */
		public function set frequency( float_:Number ):void
		{
			data2.frequency.value[ 0 ] = float_;
		}

		static public function getInstance():WavereflectionShader
		{
			if ( instance )
			{
				return instance;
			}
			else
			{
				instance = new WavereflectionShader();
				return instance;
			}
		}
	}
}
package couk.psyked.pixelbender
{

	import flash.display.Shader;
	import flash.display.ShaderParameter;
	import flash.utils.ByteArray;

	/**
	 * Generated by PBJtoAS http://blog.minim.pl/PBJtoAS
	 *
	 * namespace : Posterizer
	 * vendor : Petri Leskinen
	 * version : 1
	 * description : Applies a palette of 2 to 8 specified colors
	 */

	public dynamic class PosterizerShader extends Shader
	{

		static private var instance:PosterizerShader;

		private var data2:Object;

		public function PosterizerShader()
		{
			var ba:ByteArray = new ByteArray();
			var bytes:Array = 'F85A35133FEE53D094464F351D44F1DCB583 281D5DC 9812992C3C2DBBAC09254 185 9CE5D90B2492DE41146116DD488167B9AE5C0E920ABE2608142 698D8ABC6448320AABBF02EFD1CA68612A8F2ACC5A7671EBF5F773BCE4E98803C33E05F8BC2613BAF 55F37BB4E11883ACED3CC1CC25FBE961D1667433E88FD17BF9241F337A3BA50B7 F 59F38DE87987634C450745DEE2872875DEE5B9581F7F857E9 BB0945CBB64D59EFAFC1787DD51F48FDD5162CD2F6D79811CB28D40FE7A38976EF91E5F425CE0309E95ABB0B0 E5C4E 1536E89C8BFD8F2DE44253A 4294F40E8 9C327578E63F26D7B17CF752BD83A9117D1C1A3 5EAB68A75 34F9F6FFF7DF62D267FFAC28ABAA95C49C6C1BD35 76F2F54CECEDE13 2C18ADB99B13CBA7BD1EF1EDB75DBBF5F10C2 E943633E3C89ED2481342CEC68C72AF 582A95C4D EA1D1A1851394F6333D2524FC4ACCA64DCE6FE8AF7E3F8C4C31 82612E42D 94954A283C771BF2EBDEB77FC9830A9EB18A6F38DE5 1CDDFA3F63C85A3701BF02A99C5D8EF85A1D4AC3880A843C689C696DC 78D8BF0D2C2D59D62 3F983E028E2C59DB1CB D1421E243 5859F46FDDA94A54D8F674F2F4573F8BE32D1974FC7EBAA12 F 9F9C9738D5ABF53C7DAFF425752BE6E5DBC37B6CBEA8F4EB359D08ADB38DBFD2D96A17A5DE0ECD06494A37DEDFA6F866EAD41EF5013FBAE42 829 87BCB6433B849 B39 539CED179AF21 4 6D1C929BEAB E D28 FA266DC4DA387 F6A51FEC97B654C7D2A4412FB A4E9B248B112EC67E7E27CB7E38B6769769F16A6354976DE5D11434DF52FEB9F33FB549C5FEB7933FCC724B77A2AF7D63BDEBF84FBB749E2A5827B8B6B1B26C4739321A B7DC71CDC9FF37E5BBFF11675B1671038223E78BE6DF81E5963BAA7CE5CAFE76E379543447D2879B467ED742DB8E35E61942F1E625567709A8B729ACB729AAB66B5D23C469C5E5C 23C39A5F9F3AB664D25F8F3F3F8738B726617644D2F18B71F624D4F61ADAC48DBD8123730E25EC2 A37B0 757DC1057DC1257DC85AFF21A931CC97C8381786718'.split( '' );
			var i:uint = 0;

			while ( bytes.length )
			{
				ba.position = i;
				ba.writeByte( parseInt( bytes.shift() + bytes.shift(), 16 ) - 128 );
				i++;
			}
			ba.uncompress();

			super( ba );
			data2 = this[ 'data' ];
		}

		public function setDefaultParameters():void
		{
			var j:uint;

			for ( var i:String in data2 )
			{
				if ( data2[ i ] is ShaderParameter )
				{
					if ( data2[ i ].value[ 0 ] is Array )
					{
						for ( j = 0; j < data2[ i ].value.length; j++ )
						{
							ShaderParameter( data2[ i ]).value[ j ] = ShaderParameter( data2[ i ])[ 'defaultValue' ][ j ].concat();
						}
					}
					else
					{
						ShaderParameter( data2[ i ]).value = ShaderParameter( data2[ i ])[ 'defaultValue' ].concat();
					}
				}
			}
		}

		public function get numColors():int
		{
			return int( data2.numColors.value[ 0 ]);
		}

		/**
		 * @param int_ from 2 to 8
		 */
		public function set numColors( int_:int ):void
		{
			data2.numColors.value[ 0 ] = int_;
		}

		public function get color6():Array
		{
			return new Array( data2.color6.value );
		}

		/**
		 * @param float4_ from 0,0,0,0 to 1,1,1,1
		 */
		public function set color6( float4_:Array ):void
		{
			data2.color6.value = float4_;
		}

		public function get color7():Array
		{
			return new Array( data2.color7.value );
		}

		/**
		 * @param float4_ from 0,0,0,0 to 1,1,1,1
		 */
		public function set color7( float4_:Array ):void
		{
			data2.color7.value = float4_;
		}

		public function get color1():Array
		{
			return new Array( data2.color1.value );
		}

		/**
		 * @param float4_ from 0,0,0,0 to 1,1,1,1
		 */
		public function set color1( float4_:Array ):void
		{
			data2.color1.value = float4_;
		}

		public function get blur():Number
		{
			return Number( data2.blur.value[ 0 ]);
		}

		/**
		 * @param float_ from 0 to 4
		 */
		public function set blur( float_:Number ):void
		{
			data2.blur.value[ 0 ] = float_;
		}

		public function get color2():Array
		{
			return new Array( data2.color2.value );
		}

		/**
		 * @param float4_ from 0,0,0,0 to 1,1,1,1
		 */
		public function set color2( float4_:Array ):void
		{
			data2.color2.value = float4_;
		}

		public function get color3():Array
		{
			return new Array( data2.color3.value );
		}

		/**
		 * @param float4_ from 0,0,0,0 to 1,1,1,1
		 */
		public function set color3( float4_:Array ):void
		{
			data2.color3.value = float4_;
		}

		public function get color4():Array
		{
			return new Array( data2.color4.value );
		}

		/**
		 * @param float4_ from 0,0,0,0 to 1,1,1,1
		 */
		public function set color4( float4_:Array ):void
		{
			data2.color4.value = float4_;
		}

		public function get color8():Array
		{
			return new Array( data2.color8.value );
		}

		/**
		 * @param float4_ from 0,0,0,0 to 1,1,1,1
		 */
		public function set color8( float4_:Array ):void
		{
			data2.color8.value = float4_;
		}

		public function get color5():Array
		{
			return new Array( data2.color5.value );
		}

		/**
		 * @param float4_ from 0,0,0,0 to 1,1,1,1
		 */
		public function set color5( float4_:Array ):void
		{
			data2.color5.value = float4_;
		}

		static public function getInstance():PosterizerShader
		{
			if ( instance )
			{
				return instance;
			}
			else
			{
				instance = new PosterizerShader();
				return instance;
			}
		}
	}
}
package couk.psyked.pixelbender
{

	import flash.display.Shader;
	import flash.display.ShaderParameter;
	import flash.utils.ByteArray;

	/**
	 * Generated by PBJtoAS http://blog.minim.pl/PBJtoAS
	 *
	 * namespace : AIF
	 * vendor : Adobe Systems
	 * version : 2
	 * description : pixelate an image
	 */

	public dynamic class PixelateShader extends Shader
	{

		static private var instance:PixelateShader;

		private var data2:Object;

		public function PixelateShader()
		{
			var ba:ByteArray = new ByteArray();
			var bytes:Array = 'F85ACD DC1CA83B198 5DFB23348E2202EAD45B9 25E20C5903A32A0F4DBE273D78213E418A4256E66A82336FB F20B7D23C 0C987414D7F785EFB3C7F44809C85DAFD20C6869AAAAB8D79D6EE89 B659D 6EACFD6398E8B659E29FEF876 1 C47A07654F96DACF82AA8725BCE37A1735FD0ADED2D DFCA23CB08ED41B7B98EE1D6BD4E241FA2134A1FBDEF895C65B35ECA2 1E510 791D482C5BB991BB09A82EFA835EDE3D8 E433CE418389812334AEFF185542C87E6408550E3465341C756F9561263 62728C81AAB179C1F9C6FB97F67FF613A407759E778A9B045AF3CAFCDB5'.split( '' );
			var i:uint = 0;

			while ( bytes.length )
			{
				ba.position = i;
				ba.writeByte( parseInt( bytes.shift() + bytes.shift(), 16 ) - 128 );
				i++;
			}
			ba.uncompress();

			super( ba );
			data2 = this[ 'data' ];
		}

		public function setDefaultParameters():void
		{
			var j:uint;

			for ( var i:String in data2 )
			{
				if ( data2[ i ] is ShaderParameter )
				{
					if ( data2[ i ].value[ 0 ] is Array )
					{
						for ( j = 0; j < data2[ i ].value.length; j++ )
						{
							ShaderParameter( data2[ i ]).value[ j ] = ShaderParameter( data2[ i ])[ 'defaultValue' ][ j ].concat();
						}
					}
					else
					{
						ShaderParameter( data2[ i ]).value = ShaderParameter( data2[ i ])[ 'defaultValue' ].concat();
					}
				}
			}
		}

		public function get dimension():int
		{
			return int( data2.dimension.value[ 0 ]);
		}

		/**
		 * @param int_ from 1 to 100
		 */
		public function set dimension( int_:int ):void
		{
			data2.dimension.value[ 0 ] = int_;
		}

		static public function getInstance():PixelateShader
		{
			if ( instance )
			{
				return instance;
			}
			else
			{
				instance = new PixelateShader();
				return instance;
			}
		}
	}
}
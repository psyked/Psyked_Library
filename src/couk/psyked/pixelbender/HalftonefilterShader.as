package couk.psyked.pixelbender
{

	import flash.display.Shader;
	import flash.display.ShaderParameter;
	import flash.utils.ByteArray;

	/**
	 * Generated by PBJtoAS http://blog.minim.pl/PBJtoAS
	 *
	 * namespace : Karthik filters
	 * vendor : huangnankun@gmail.com
	 * version : 1
	 * description : torus lense
	 */

	public dynamic class HalftonefilterShader extends Shader
	{

		static private var instance:HalftonefilterShader;

		private var data2:Object;

		public function HalftonefilterShader()
		{
			var ba:ByteArray = new ByteArray();
			var bytes:Array = 'F85A35D44DEA94C1902E196959E4E1553D9AD9E8441387E1C294BC68F69290C5C1C1719A47EC6F6E10798973132827F9826FFA5A78F34F4187585C75893C88BEC1488BD855D37BB31B 0E2F4AE9F55D575FDD55555735982 0CF97613E9F761FA5313E97 439CEC72D58 FF4366BEFEBF8682779B05811FD6349E0545A53F1AFC9E1D87871A076631DA2D6 3488F429B5BC9842365BD C8A1298AC8C6D69ECBB8DF6F33273A4ADB2996AB853F0E059802D2D47C53E19A4E98FED2C436EA57996 9867180BED8D190BF7743C2 39A81197E2B4A5C10E476F45FAF423CBADAD7F8D493FBDA514817BA5F57BA1679D0CB244FE4BFC9 DB1C88316A566ADA39D3C51B5DDD553DD9F1D52D5BF96F5B1BA 8 AC89217CC7AB35DA253BD19A7F2 8 34EF15024ED41B2 EB02C 952B7A73A79651468465A2228A1112F13C26E875910D4F6C33CBAA3BE511398 E 328E44540 FA2FFDE36DB17D527FB6D1667117D88A2CB A9477694096B6DCCAF5 64C50314083E8432A83651D1FEFEFA336C928A3203420849B51 1B1F49CD082CB2C7B4773FEC9FECF403183AF206342 9 336 3A8604A9F73938F71CEF99A4C5328F850FF62A2DA 88D62954CAB1857E5DEC4C13C8214CBF5577CE330E6FEC9FE4F 5E341FA 275C8877D28 FFA 275388F2A17F4267DB0AF69CE66B161DD6C4365BE4499FDD03D44CBF519B97C233A2CF35635B8DF6BB773354FB95FFA7D65FC7DC6EF3AA77F39 F3F5D13 9BE69529F45B67BEE7855A67EBF 42077224091553B21B8756052F72A 3D29C416FC1103EB275816F 5C197 E28 E8B33B843571A59ED1357207C12D0D19F2B 64754E3ECBC179C57B6F1CBA09A144FF9E744AB E17ECD7F94B1C67 2E741A1DCF5E1ED2962B9F25196AE D2ECD7F832FC17F9BA469D6FE F7CD6 31E7C93D8B17E4369F9 7ED 773BB4D A2F43BC38E7DE93711A 0F5BEB77D907F5DC7DF3F21ED66 079ED 7675F3D7C6EBD72D473C7F4F83EAE5DB7E2137A46F8135F24FB9FF31C193B61433DE8B72B7B4077E66E5164CF7C93BE474C8F67 E79265FA667B72B7C9523B7 6C9BD5731FE43EB15A5ED8E2E8AD8 82BB6145D8A9523E4B47BFA932A F62989523E4B4F137B86E9785101845'.split( '' );
			var i:uint = 0;

			while ( bytes.length )
			{
				ba.position = i;
				ba.writeByte( parseInt( bytes.shift() + bytes.shift(), 16 ) - 128 );
				i++;
			}
			ba.uncompress();

			super( ba );
			data2 = this[ 'data' ];
		}

		public function setDefaultParameters():void
		{
			var j:uint;

			for ( var i:String in data2 )
			{
				if ( data2[ i ] is ShaderParameter )
				{
					if ( data2[ i ].value[ 0 ] is Array )
					{
						for ( j = 0; j < data2[ i ].value.length; j++ )
						{
							ShaderParameter( data2[ i ]).value[ j ] = ShaderParameter( data2[ i ])[ 'defaultValue' ][ j ].concat();
						}
					}
					else
					{
						ShaderParameter( data2[ i ]).value = ShaderParameter( data2[ i ])[ 'defaultValue' ].concat();
					}
				}
			}
		}

		/**
		 * angle you wish to place the halftone screen
		 */
		public function get gamma():Number
		{
			return Number( data2.gamma.value[ 0 ]);
		}

		/**
		 * angle you wish to place the halftone screen
		 * @param float_ from 0.5 to 5
		 */
		public function set gamma( float_:Number ):void
		{
			data2.gamma.value[ 0 ] = float_;
		}

		/**
		 * maximum size of the dots used to halftone
		 */
		public function get max_dot_size():Number
		{
			return Number( data2.max_dot_size.value[ 0 ]);
		}

		/**
		 * maximum size of the dots used to halftone
		 * @param float_ from 3 to 20
		 */
		public function set max_dot_size( float_:Number ):void
		{
			data2.max_dot_size.value[ 0 ] = float_;
		}

		/**
		 * angle you wish to place the halftone screen
		 */
		public function get angle():Number
		{
			return Number( data2.angle.value[ 0 ]);
		}

		/**
		 * angle you wish to place the halftone screen
		 * @param float_ from 0 to 360
		 */
		public function set angle( float_:Number ):void
		{
			data2.angle.value[ 0 ] = float_;
		}

		/**
		 * Spacing between the dots for the grid
		 */
		public function get dot_spacing():Number
		{
			return Number( data2.dot_spacing.value[ 0 ]);
		}

		/**
		 * Spacing between the dots for the grid
		 * @param float_ from 5 to 40
		 */
		public function set dot_spacing( float_:Number ):void
		{
			data2.dot_spacing.value[ 0 ] = float_;
		}

		static public function getInstance():HalftonefilterShader
		{
			if ( instance )
			{
				return instance;
			}
			else
			{
				instance = new HalftonefilterShader();
				return instance;
			}
		}
	}
}